(define derivative
	(lambda (expression variable)
		(cond ((null? expression) '())
			  ((pair? expression)
				((lambda (ex1 operand ex2)
					(cond ((equal? operand '+) (list (derivative ex1 variable) '+ (derivative ex2 variable)))
						  ((equal? operand '-) (list (derivative ex1 variable) '- (derivative ex2 variable)))
						  ((equal? operand '*) 
							(list (list (derivative ex1 variable) '* ex2) '+ (list ex1 '* (derivative ex2 variable))))
						  ((equal? operand '/)
							(list (list (list (derivative ex1 variable) '* ex2) '- (list ex1 '* (derivative ex2 variable))) 
									'/ (list ex2 '* ex2)))
						  (else '()))) (car expression) (cadr expression) (caddr expression)))
			  (else (cond ((equal? expression variable) '1) (else '0))))))
